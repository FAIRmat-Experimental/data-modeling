category: application
doc: |
  Application definition for a sample characterization at an electron microscope.
  
  Electron microscopes (EM), whether it be a scanning electron microscope (SEM)
  or a transmission electron microscope (TEM), are versatile tools preparing and
  characterizing samples and specimen. The term specimen is used in this application
  definition it is understood as a synonym for a sample. A specimen is a physical
  portion of material that is prepared and/or characterized in eventually
  various places/positions, so-called regions of interest (ROIs).
  
  Fundamentally, an EM is an electron accelerator. Experimentalists book/use this tool
  in sessions during which they prepare and/or characterize specimens. This application
  definition enables to describe processes, data and metadata for such tasks applied
  to one specimen. Multiple specimens can be described with multiple entries,
  NXentry instances specifically.
  
  There are research groups who use an EM in a manner where it is exclusively operated
  by a single, instrument-responsible scientists or a team of (staff) scientists.
  These users perform analyses for other users as a service task. Oftentimes, though,
  and especially in the case for cutting-edge instruments - the scientists or team
  guide the process while in control of the microscope. Oftentimes the scientists
  operate the instrument themselves and ask technicians only for support wrt to
  service tasks. In all cases, these people are considered users, which may take
  different roles though.
  
  There are similarities and dissimilarities between SEM and TEMs: Both have electro-
  magnetic lenses. These lens may differ in design, alignment, number, and level of 
  corrected-for aberrations. As an obvious difference, TEMs measure the transmitted
  signals. This demands thinner specimens but offers capabilities for probing of
  additional physical mechanisms of electron-matter interaction instead of near-surface
  interactions, i.e. nanometer-scale sub-surface interactions. 
  
  Compared to SEMs, TEMs have a different relative arrangement between the lenses and 
  the specimen; most obvious through the arrangement of the objective lens. Nevertheless,
  both types of EMs use detector systems, which can measure different types of signals
  originating from radiation/specimen interactions. Detectors can also be similar.
  
  Given these physical and technical differences, different instruments have be developed.
  This lead to a coexistence of two broad interacting communities: SEM and TEM users. 
  From a data science perspective, we acknowledge that the more specific a research question
  is and more narrow the addressed user base is who develop or use schemata for
  research data management with EM data and metadata, the more understandable it is 
  that scientists of either community (or sub-community)ask for method-specific schemata.
  
  Researchers who have a single (main) microscope of some vendor in their lab, may argue
  they need an NXem_vendor_name schema or an NXem_microscope_name or an NXem_sem or an 
  NXem_tem schema. Scientists exclusively working with one technique or type of signals 
  probed (X-rays, electrons) may argue they wish to be pragmatic and store only what is
  immediately relevant for their particular technique and research questions. In effect,
  they may advocate for method-specific schemata such as NXem_ebsd, NXem_eels, 
  NXem_edx, or NXem_imaging.
  
  The development in the past has shown that these activities have led to a zoo of schema,
  and implementations of these into data and file formats. There is nothing which prevents to 
  make these schemata open and interoperable. Open here means specifically not that all data 
  showing compliance with/or use the schema have to end up in the open-source domain. 
  There can be embargo periods first of all. Open means that the metadata and associated schema
  are documented in a manner that as many details as possible are open in the sense that 
  others can understand what the (meta)data mean conceptually. The [FAIR](https://doi.org/10.1038/sdata.2016.18)
  principles guide all decisions how data and metadata should be stored.
  
  EM instruments, software, and research are a moving target. Consequently, there is a key
  challenge and inconvenience with having many different schemata associated representations
  of data and metadata for EM research data, especially when data should be processed interoperably
  between software packages. Each combination of schema or an interoperable-made handshake 
  between two file formats or software packages has to be maintained by software developers.
  
  This brings two problems:
  Many software tools and parsers for the handshaking between tools to maintain that come
  usually with a large variety of terminology. If the meaning of these terms is not specific
  and digitally represented, the resulting connections between different data representations
  and the workflows in which these data may not be machine-actionable.
  
  Here a common vocabulary can serve interoperability as developers of schemata and scientists
  can take for instance this application definition and reuse its terms as closely as possible.
  Ideally, they specialize the application definition only for the few very specific additional
  quantities of their instrument rather than trying to reimplement the wheel for descriptions of
  the instrument. This route of more standardization can support the EM community in that it removes
  the necessity for a very large number of schemata. Consequently, fewer possible combinations of
  software tools and version inconsistencies have to be managed and bug-fixed by vendors and the
  community. Aiming for a lower number of schemata serves academia as it enables the EM community
  to focus their software development efforts on those schemata, fixing and discussing them,
  harmonize the common vocabulary used. In effect, everybody can gain from this as it will likely
  reduce the cases in which scientists have to fix bugs in making their own tools compliant and
  interoperable with tools that they wish to use from their colleagues and the wide community.
  
  The here proposed NXem application definition offers modular components which users can
  use as is or extend if their use case is really not reflected. Working towards a common
  vocabulary is a community activity that profits from everybody reflecting in detail whether
  certain terms they use are not eventually conceptually the same as what this application
  definition can already take care of. We are happy for receiving your feedback.
  
  It is noteworthy to understand that (not only for) NeXus schema differ already if at least
  one field is required in one version of the schema, but optional in another version. If group(s),
  field(s), or attributes are removed or added, or even a docstring is changed schemata can
  become inconsistent. An application definition is a contract between a data provider (microscope
  software) and a data consumer (e.g. a scientific software for doing artificial intelligence
  with these EM data). Such changes of a schema lead to new versions.
  
  Tools like NeXus do not avoid or protect against facing these inconsistencies; however NeXus offers
  a mechanism and toolset, through which schemata can be documented and defined. In effect, having an
  openly documented (at case-specific level of technical detail) schema is a necessary but not sufficient
  step to take towards making EM data machine-actionable and interoperable.
  A common vocabulary and a machine-actionable knowledge representation/engine is required.
  Essentially when the docstrings are no longer needed but can replaced by a connection
  to an automated tool which understands what a specific field represents conceptually EM
  data become more generally interoperable EM data.
  
  This application definition takes a key step into this direction. To be most efficient and
  offering reusability the application definition should be understood as a template that one
  should ideally use as is. If required groups, field, or attributes are not needed for a 
  specific application definition 
  
  The use of this application schema should be as follows. Offspring application definitions
  for EM should not remove groups but make them optional or, even better, propose rather
  changes in the application definition.
  
  A particular challenge with electron microscopes as physical instruments are their dynamics.
  To make EM data understandable, repeatable, and eventually corresponding experiments reproducible
  in general requires a documentation of the spatio-temporal dynamics of the instrument
  in its environment that is in most cases neither practical nor possible. For many commercial systems
  specific details about lens excitations may not be retrievable beyond different levels of 
  technical detail. EM experiments by design illuminate the specimen with electrons as a consequence
  of which the specimen changes if not gets destroyed. As such, repeatability of numerical processing
  and clear descriptions of procedures and system setups should be addressed first.
  
  In fact if especially a certain simulation package needs a detailed view
  of the geometry of the lens system and its excitations during the course of the 
  experiment, it is difficult to fully abstract the technical details of the hardware
  into a set of names for fields and groups that make for a compromise between
  clarity and being vendor-agnostic. Settings of apertures are an example where in
  fact aperture modes are aliases behind which an entire set of settings is triggered
  that is often inaccessible for reasons of making EM experiments understandable and
  conveniently executable for many users. The opportunities for application definitions
  to offer an abstraction layer are limited.
  
  Instead, it is for the docstring to specify what is conceptually eventually behind
  such aliases. The design rule we followed while drafting the applicatin definition and 
  base classes is that there are numerous (technical) details about an EM which may warrant
  a very detailed technical disentangling of settings and reflection of numerous settings
  as deeply nested groups, fields and attributes. An application definition can offer a place
  to hold these nested representations at the cost of generality.
  
  Which specific details matter for answering scientific research questions is a difficult
  question to answer by a single team of scientists, especially if the application definition
  is to speak for a number of vendors. What makes it especially challenging if the application
  definition is expected to hold all data that might be of relevance for future questions.
  
  We are skeptical if there is one representation that can ful-fill all these aims,
  while remaining approachable and executable by a large number of scientists in a 
  community. With this application definition we can only motivate the community to work
  towards such aim. While doing so we found that existent terminology can be encoded
  in more controlled vocabulary.
  
  We have concluded that despite all these details of current EM research with SEM, TEM,
  and focused-ion beam instruments, there a clearly identifiable common components 
  and generalizable settings of an use cases of these for which metadata and numerical
  data can be represented with this application definition.
  
  Specifically, this application definition has the following components
  at the top-level:
  * Generic experimental details (timestamp, identifiers, name);
    conceptually these are session details. A session at a microscope may
    involve the characterization of multiple specimens. For each specimen
    an instance of an (NXentry) is created. Details of the instrument have to be stored
    at least in an entry. Other entries should refer to these metadata via links
    to reduce redundancies.
  * Each signal, such as a spectrum or image taken at the microscope should have
    a time stamp and link to the specific settings of the microscope at that
    point in time when the image was taken. The reason is that EMs can be highly
    dynamic and thus physically illuminate the specimen differently or show drift
    during signal acquisition, to name but a few effects.
    What constitutes a single EM experiment/measurement? This can be collecting a single 
    diffraction pattern with a scanning TEM (STEM), taking of a secondary electron
    image for fracture analysis, taking a set of EBSD line scan and surface mappings
    in an SEM, or ion-beam-milling of a specimen for preparing an atom probe
    experiment.
  * NXmonitor instances to keep track of time-dependent quantities pertaining
    to specific components of the instrument
  * NXinstrument;
    conceptually this is a container to store arbitrary level of detail of the
    technical components of the microscope as a device and the lab in which
    it is operated.
  * NXuser;
    conceptually, this is a set with at least one NXuser instance which details
    who operated or performed the measurement. Additional NXusers can be referred
    to in an NXem_snapshot data group to offer possibilities for storing 
    individualized details for a measurement.
  * A set of NXem_snapshot instances;
    each instance is a container to group specific details about the state
    of the microscope when a measurement was taken and relevant data and
    eventual processing steps that were taken.
  * NXdata;
    conceptually, this is nothing more than a reference to some data which, if
    available are worth to be plotted in a default way. A default plottable can be 
    useful for RDM systems to show a visual representation of some aspect of the data.
    It is clear that what constitutes a default plots is a matter of interpretation,
    somewhat personal taste, community standards. In effect, default plottables are
    case- and method-specific. Usually a session at a microscope is used to
    collect multiple signals and images. Examples for possible default plottables
    could be an arbitrarily taken:
    * Secondary, back-scattered, electron image
    * A diffraction pattern
    * An EELS spectrum
    * A composition or orientation mapping
  
  There are a few design choices to consider with sub-ordinate groups:
  * Above images, spectra, and mappings should be stored as NXdata instances,
    ideally formatted in such a way that they can be displayed with visualization
    software that can be specific for the file format in which the data are 
    stored that comply to this application definition. Json, HDF5, XML, or HSDS,
    are examples.
  * Consumable results of EM characterization tasks are usually a sub-set of
    data artifacts, as there is not an infinite amount of possible beam-specimen 
    interactions:
  * Images of electron counts detected in specific operation modes
    (bright field, dark field in TEM, secondary/back-scattered, Kikuchi in SEM)
  * Spectra (X-ray quanta or auger electron counts)
  * These data are in virtually all cases a result of some numerical processing.
    It makes sense to name them with a controlled vocabulary, e.g.
    * se (secondary electron), bse (back-scattered electron), kikuchi, xray, auger.
  
  A key question of asked with EM experiments is how and where the actual (meta)data
  which the application definition encodes are stored (in memory or on disk). 
  To this end the schema, here makes no specific assumptions, not even that all the
  fields/group of a schema instance have to be stored in a single file. 
  The pieces of information can in fact be distributed physically across multiple
  files, at the extreme even across dissimilarly formatted files.
  
  The key point is that the information graph, i.e. how (meta)data are nested, the
  relations between groups, fields and both their respective attributes matches with the
  specifications in this application definition.

# NEW ISSUE: see duration and collection time, duty cycle
# NEW ISSUE: duration and collection_time needs a clearer description and definition by the community
# NEW ISSUE: should version always be an enumeration?
# NEW ISSUE: filter keywords \(.*?\)
# POINTS TO DISCUSS: NXdetector adding only those fields which have changed or not?
symbols:
# the NeXus default for application definitions wrt to the exists keyword is that it is required
(NXem):
  (NXentry):
    exists: [min, 1, max, infty]
    ##MK the definition field and its version attribute enumeration will be added by yaml2nxdl automatically
    definition:
      doc: NeXus NXDL schema to which this file conforms.
      enumeration: [NXem]
      \@version:
        doc: |
          An at least as strong as SHA256 hashvalue of the file that specifies the application definition.
          In FAIRmat, the hash is computed from the yaml file representation of the application definition.
        enumeration: [sha_256_hash]
    experiment_identifier:
      doc: |
        Ideally, a (globally) unique persistent identifier for referring to this experiment.
        
        The identifier is usually defined/issued by the facility, laboratory, or the principle investigator.
        The identifier enables to link experiments to e.g. proposals.
    experiment_description:
      exists: optional
      doc: |
        Free-text description about the experiment.
        
        Users are strongly advised to detail the sample history in the respective 
        field and fill rather as completely as possible the fields of this 
        application definition rather than write details about the experiment
        into this free-text description field.
    start_time(NX_DATE_TIME):
      doc: |
        ISO 8601 time code with local time zone offset to UTC information included when the microscope session started.
        If the application demands that time codes in this section of the application definition should only be
        used for specifying when the experiment was performed - and the exact duration is not relevant - this
        start time field should be used.
        
        Often though it is useful to specify a time interval with specifying both start_time and end_time to allow
        for more detailed bookkeeping and interpretation of the experiment. The user should be aware that even with
        having both time instances specified, it may not be possible to infer how long the experiment took or for
        how long data were acquired.
        
        More detailed timing data over the course of the experiment have to be collected to compute this.
        These computations can take advantage of individual time stamps in NXevent_em instances to
        provide additional pieces of information.
    end_time(NX_DATE_TIME):
      exists: recommended
      doc: |
        ISO 8601 time code with local time zone offset to UTC included when the microscope session ended.
    program:
      doc: |
        Commercial or otherwise given name to the program which was used to create the file.
        
        Electron microscopy experiments are usually controlled/performed via commercial
        integrated acquisition and instrument control software. In many cases, an EM dataset
        is useful only if gets post-processed already during the acquisition or shortly thereafter,
        i.e. while the scientist is still sitting at the microscope.
        Many of these processes are automated, while some demand GUI interactions with the control software.
        Examples include collecting of diffraction pattern and on-the-fly indexing of these.
        
        It is possible that different types of programs might be used to perform these processing steps
        whether on-the-fly or not. If this is the case the processing should be structured with
        individual NXprocess. If the program and/or version used for processing referred to in an NXprocess
        group is different to the program and version mentioned in this field, the NXprocess needs
        to hold an own program and version.
      \@version:
        doc: |
          Program version plus build number, commit hash, or description of an ever persistent resource
          where the source code of the program and build instructions can be found so that the program
          can be configured in such a manner that the result file is ideally recreatable yielding the
          same results.
    experiment_documentation(NXnote):
      exists: optional
      doc: |
        Binary container for a file or a compressed collection of files which can be
        used to add further descriptions and details to the experiment.
        The container can hold a compressed archive.
    thumbnail(NXnote):
      exists: recommended
      doc: |
        A small image that is representative of the entry; this can be an
        image taken from the dataset like a thumbnail of a spectrum.
        A 640 x 480 pixel jpeg image is recommended. 
        Adding a scale bar to that image is recommended but not required
        as the main purpose of the thumbnail is to provide e.g. thumbnail
        images for displaying them in data repositories.
      \@type:
    operator(NXuser):
      exists: [min, 1, max, infty]
      doc: |
        Contact information and eventually details of at least one person
        involved in the taking of the microscope session. This can be the
        principle investigator who performed this experiment.
        Adding multiple users if relevant is recommended.
      name:
        doc: Given (first) name and surname of the user.
      affiliation:
        exists: recommended
        doc: Name of the affiliation of the user at the point in time when the experiment was performed.
      address:
        exists: recommended
        doc: Postal address of the affiliation.
      email:
        doc: Email address of the user at the point in time when the experiment was performed. Writing the most permanently used email is recommended.
      orcid:
        exists: recommended
        doc: Globally unique identifier of the user as offered by services like ORCID or ResearcherID.
      telephone_number:
        exists: optional
        doc: (Business) (tele)phone number of the user at the point in time when the experiment was performed.
      role:
        exists: optional
        doc: |
          Which role does the user have in the place and at the point 
          in time when the experiment was performed? Technician operating
          the microscope. Student, postdoc, principle investigator, guest
          are common examples.
      social_media_name:
        exists: optional
        doc: Account name that is associated with the user in social media platforms.
      social_media_platform:
        exists: optional
        doc: Name of the social media platform where the account under social_media_name is registered.
    (NXsample):
      # NEW ISSUE: inject the conclusion from the discussion with Andrea
      # according to SAMPLE.yaml 0f8df14 2022/06/15
      # ID: -> maps to name
      # name: -> short_title
      # user: -> not matched right now
      # citation: doi ->why relevant, should be solved by the RDM graph management system
      method:
        doc: A qualifier whether the sample is a real one or a virtual one (in a computer simulation)
        enumeration: [experimental, simulation] # MK:: declared_by_vendor I would rather expect this for a substance
      # COMPONENT.yaml
      # SUBSTANCE:
      # QUANTIFY
      doc: |
        A description of the material characterized in the experiment.
        Sample and specimen are threaded as de facto synonyms.
      name: # MK: for now the ID
        doc: |
          Descriptive name or ideally (globally) unique persistent identifier.
          The name distinguishes the specimen from all others and especially
          the predecessor/origin from where the specimen was cut.
          
          This field must not be used for an alias of the sample.
          Instead, use short_title.
          
          In cases where multiple specimens have been loaded into the microscope
          the name has to identify the specific one, whose results are stored
          by this NXentry, because a single NXentry should be 
          for the characterization of a single specimen.
          
          Details about the specimen preparation should be stored in the 
          sample history.
      sample_history:
        doc: |
          Ideally, a reference to a (globally) unique persistent identifier, representing a data 
          artifact which documents ideally as many details of the material, its microstructure,
          and its thermo-chemo-mechanical processing/preparation history as possible.
          
          The sample_history is the record what happened before the specimen was placed into the
          microscope at the beginning of the session.
          
          In the case that such a detailed history of the sample/specimen is not available, use this field as
          a free-text description to specify a sub-set of the entire sample history, i.e. what you would consider
          being the key steps and relevant information about the specimen, its material, microstructure, 
          thermo-chemo-mechanical processing state, and the details of the preparation.
          
          Specific details about eventual physically-connected material like embedding resin should be
          documented ideally also in the sample_history. If all fails, the description field
          can be used but it is strongly discouraged because it leads to eventually non-machine-actionable
          data.
      preparation_date(NX_DATE_TIME):
        exists: recommended
        doc: | 
          ISO 8601 time code with local time zone offset to UTC information when the specimen was prepared.
          
          Ideally report the end of the preparation, i.e. the last known time the measured specimen surface
          was actively prepared. Usually this should be a part of the sample history, i.e. the sample
          is imagined handed over for the analysis. At the point it enters the microscope the session starts.
          
          Knowing when the specimen was exposed to e.g. specific atmosphere is especially required for
          environmentally sensitive material such as hydrogen charged specimens or experiments
          including tracers with a short half time. Further time stamps prior to preparation_date should
          better be placed in resources which describe the sample_history.
      short_title:
        exists: optional
        doc: Possibility to give an abbreviation or alias of the specimen name field.
      atom_types:
        doc: |
          Use Hill's system for listing elements of the periodic table which are inside or attached
          to the surface of the specimen and thus relevant from a scientific point of view.
          
          The purpose of the field is to offer materials database systems an opportunity to parse
          the relevant elements without having to interpret these from the sample history.
      # NEW ISSUE: use Andrea and MarkusK groups for describing the geometry of the sample
      thickness(NX_FLOAT):
        exists: required
        doc: (Measured) sample thickness
        unit: NX_LENGTH
        # \@units: nm
      # NEW ISSUE: error estimates of the thickness and origin, i.e. how the value was obtained would be useful
      # NEW ISSUE: error model
      # NEW ISSUE: the KIT/SCC SEM, TEM schemata further qualify samples whether they are conductive e/ibeam sensitive
      # etc. The problem with this is that beam sensitivity is too vague, spatio-temporal electron dose integral dependent
      # KIT/SCC distinguish further conductivity and magnetic properties. While the motivation is clear, making
      # simple could be problematic or not decision, it is also these descriptors if remaining vague are also not useful
      # what are good or bad properties, it would make sense though to quantify these values
      # this includes the description of eventual plasma cleaning steps,
      # just knowing that a sample was plasma cleaned is insufficient, maybe it was not cleaned long enough
      # if plasma cleaning is done outside the EM than its certainly history, if it happens inside the EM
      # are the ibeam description capabilities not sufficient enough?
      description:
        doc: Discouraged free-text field in case properly designed records for the sample_history
        exists: optional
    (NXdata):
      # exists: optional
      doc: |
        Hard link to a location in the hierarchy of the NeXus file
        where the data for default plotting are stored.
    (NXcoordinate_system_set):
    # in what follows each component of the instrument might be equipped with an NXmonitor
    (NXmonitor):
      exists: [min, 0, max, infty]
    # NEW ISSUE ADD AS MANY MONITORS AS NEEDED, also for pressure etc.

    # in what follows, an as-detailed as desired collection of components
    # making up the instrument follows at this level of the hierarchy
    em_lab(NXinstrument):
      doc: |
        Metadata and numerical data of the microscope and the lab in which it stands.
        
        The em_lab section contains a description of the instrument and its components.
        The component descriptions in this section differ from those inside individual
        NXevent_em sections. In a snapshot only those settings should be stored
        for a component that are relevant to understand the current state of the component
        where current means, at the point in time, i.e. the time interval, 
        which the snapshot represents.
        
        For example it is not relevant to store in each snapshot's electron_gun group
        again the details of the gun type and manufacturer but only the high-voltage
        if for that snapshot the high-voltage was different. If for all snapshots
        the high-voltage was the same it is not even necessary to include an electron_gun
        section in the snapshot.
        
        Individual sections of specific type should have the following names:
        * (NXaperture): the name should match with the name of the lens
        * (NXlens): condenser_lens, objective_lens are commonly used names
        * (NXcorrector_cs): device for correcting spherical aberrations
        * (NXstage_lab): a collection of component for holding the specimen and
          eventual additional component for applying external stimuli on the sample
        * (NXdetector): several possible names like secondary_electron, backscattered_electron,
          direct_electron, ebsd, edx, wds, auger, cathodolum, camera, ronchicam
      instrument_name:
        doc: |
          Given name of the microscope at the hosting institution. This is an alias.
          Examples could be NionHermes, Titan, JEOL, Gemini, etc.
      location:
        exists: optional
        doc: |
          Location of the lab or place where the instrument is installed.
          Using GEOREF is preferred.
      (NXebeam_column):
        exists: [min, 1, max, 1]
      (NXibeam_column):
        exists: [min, 0, max, infty]
      ebeam_deflector(NXscanbox_em):
      ibeam_deflector(NXscanbox_em):
        exists: optional
      (NXoptical_system):
        exists: optional
      # vendor/instrument-specific data currently case-by-case dependent
      # e.g. Nion Co. magboard settings
      (NXdetector):
        ##MK::eventually only adding (NXmanufacturer) and the new docstring is needed, will the rest be inferred automatically?
        exists: [min, 1, max, infty]
        doc: |
          Description of the type of the detector.
          
          Electron microscopes have typically multiple detectors.
          Different technologies are in use like CCD, scintillator, 
          direct electron, CMOS, or image plate to name but a few.
        (NXmanufacturer):
        description:
          exists: optional
          doc: Free text option to write further details about the detector.
      (NXpump):
        exists: optional
      # NEW ISSUE: do we consider the EELS spectrometer an own detector or an own functional unit i.e. NXeels
    measurement(NXevent_data_em_set):
      exists: [min, 0, max, 1]
      ##MK because it should be possible to use the application definition
      ##MK also to store e.g. just some descriptions about the instrument
      doc: |
        A container to structure a set of NXevent_em instances.
        
        An event is a time point/interval during which the microscope
        was configured in a specific way and the microscope was used
        to take a measurement.
        
        Each NXevent_em can hold an acquisition task with the microscope.
        For instance the capturing of an secondary electron, backscattered
        electron, diffraction image, or spectrum.
        
        An NXevent_em_data instance holds specific details about how raw data 
        from a detector were processed into consumable data like images, spectra,
        etc. These on-the-fly data processing tasks are usually performed
        by the control software, eventually realized with custom scripts.
        
        On the contrary an NXevent_em_state instance holds specific details
        about if and when settings in the microscope changed
      (NXevent_data_em):
        exists: [min, 1, max, infty]
        doc: |
          A container holding a specific result of the measurement and
          eventually metadata how that result was obtained numerically.
          
          NXevent_em instances can hold several specific
          NXimage_em_* or NXspectrum_em instance taken and considered as
          one event, i.e. a point in time when the microscope had the
          settings specified either in NXinstrument or in this event_data_em
          instance.
          
          The application definition is designed without an explicit need
          an NXevent_data_em instance that contains an NXimage_* or NXspectra_*
          instance. Because an NXevent_data_em can be used to document a
          specific state of the microscope at a time without having it put
          into the NXinstrument part.
          
          In other words the NXinstrument part details primarily the more
          static settings and components of the microscope as it was found
          by the operator during the session. The NXevent_data_em samples
          the dynamics.
          
          It is not necessary to store data in NXebeam, NXibeam instances.
          But in this case it is assumed that the settings were constant
          over the entire course of microscope session and thus all relevant
          metadata inside the NXinstrument groups are sufficient to understand
          the session.
        start_time(NX_DATE_TIME):
          doc: |
            ISO 8601 time code with local time zone offset to UTC information included when the snapshot time interval started.
            If the user wishes to specify an interval of time that the snapshot should represent during which the
            instrument was stable and configured using specific settings and calibrations, the start_time is the 
            start (left bound of the time interval) while the end_time specifies the end (right bound) of the time interval.
        end_time(NX_DATE_TIME):
          doc: |
            ISO 8601 time code with local time zone offset to UTC included when the snapshot time interval ended.
            If the user does not wish to specify a time interval, end_time should have the same value as start_time.
        event_identifier:
          doc: | 
            Reference to a specific state and setting of the microscope components.
        event_type:
          doc: |
            Which specific event/measurement type. Pick one of the following:
            * in-lens detector, like bse detector usually build from quadrants,
              can be represented like in NXmx
            * secondary_electron, image, topography, fractography, overview
            * backscattered_electron, image, Z contrast, ECCI
            * bright_field, image, TEM
            * dark_field, image, crystal defects
            * adf, image (medium- or high-angle) annular dark field, TEM
            * diffraction, image, TEM diffraction, or a comparable technique in the SEM
            * kikuchi, image, SEM EBSD and TEM diffraction
            * xray, spectrum (point, line, surface, volume), composition,
              energy-dispersive X-ray spectroscopy (EDS/EDX) in SEM, 
              EDXS as equivalent techniques in TEM,
              also for low Z elements with grating technique detectors
            * eels, spectrum (point, line, surface, volume), binding, ZLP,
              plasmons, TEM
            * auger, spectrum, (low Z contrast)
            * cathodoluminescence (optical spectra)
            * ronchicam, image, a utility image to check the alignment specifically in TEM
            * chamber, image taken with the control monitor from inside
              the SEM or TEM to check e.g. placing of components or educational
              purposes
        detector_identifier:
          doc: |
            The detector or set of detectors that was used to collect this signal.
            The name of the detector has to match the names used for available
            detectors, i.e. if the instrument has an ebsd_camera
            the detector for an NXimage_em_kikuchi should be the ebsd_camera
        # a collection of images take and group under this event
        # NEW ISSUE: should this only be one instance for a given event?
        (NXimage_set_em_se):
          exists: optional
        (NXimage_set_em_bse):
          exists: optional
        (NXimage_set_em_ecci):
          exists: optional
        (NXimage_set_em_bf):
          exists: optional
        (NXimage_set_em_df):
          exists: optional
        (NXimage_set_em_adf):
          exists: optional
        (NXimage_set_em_kikuchi):
          exists: optional
        (NXimage_set_em_diffrac):
          exists: optional
        (NXspectrum_set_em_xray):
          exists: optional
        (NXspectrum_set_em_eels):
          exists: optional
        (NXspectrum_set_em_auger):
          exists: optional
        (NXspectrum_set_em_cathodolum):
          exists: optional
        (NXimage_set_em_ronchicam):
          exists: optional
        (NXimage_set_em_chamber):
          exists: optional
        # a collection of specific details about state of the microscope
        (NXebeam_column):
          exists: optional
        (NXibeam_column):
          exists: optional
        ebeam_deflector(NXscanbox_em):
          exists: optional
        ibeam_deflector(NXscanbox_em):
         exists: optional
        (NXoptical_system):
          exists: optional
        (NXuser):
          exists: optional
