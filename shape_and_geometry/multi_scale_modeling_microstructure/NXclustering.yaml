category: base
(NXclustering):
  doc: |
    Draft of a template class container to hold results of cluster analyses.
  symbols:
    n_lbl_num: "Number of numeral labels per point."
    n_lbl_cat: "Number of categorical labels per point."
    n_cluster: "Total number of cluster detected."
  number_of_numeral_labels(NX_UINT):
  number_of_categorical_label(NX_UINT):
  point:
    doc: "Reference to a set of points investigated in a cluster analysis."
  numeral_mark(NX_NUMBER):
    doc: "Reference to numeric attribute data for the points referred to by point."
  categorical_mark:
    doc: "Reference to categorical attribute data for the points referred to by point."
  # list instances of base classes of an applied cluster algorithm
  # e.g. (NXclustering_hdbscan):
  identifier_offset(NX_UINT):
    doc: |
      Which identifier is the first to be used to label a cluster.
      
      The value should be chosen in such a way that special values can be resolved:
      * identifier_offset-1 indicating the point belongs to no cluster.
      * identifier_offset-2 indicating the point is interpreted as noise.
      Setting for instance identifier_offset to 1 recovers the commonly used case
      that noise maps to -1 and unassigned points to 0.
  noise(NX_UINT):
    doc: "Number of points categorized as noise."
    unit: NX_UNITLESS
  unassigned(NX_NUMBER):
    doc: "Number of points categorized as unassigned."
    unit: NX_UNITLESS
  size(NX_NUMBER):
    doc: "Number of points categorized per cluster. The labels are implicit, meaning the zeroth/first entry in the array belongs to the first cluster, the second entry to the second cluster and so on and so forth."
    unit: NX_UNITLESS
    dimensions:
      rank: 1
      dim: [[1, n_cluster]]
  # should we handle, and if so how fuzzy assignments or similarly probability

  