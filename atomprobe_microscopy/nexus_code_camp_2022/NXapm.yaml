category: application
doc: |
  Atom probe tomography and field-ion microscopy experiments.
symbols:
  doc: The symbols used in the schema to specify e.g. dimensions of arrays
  n_ions: Total number of ions collected
  n_dld_wires: Total number of independent wires in the delay-line detector.
  n_support: Number of support points for e.g. modeling peaks in the mass-to-charge-state ratio histogram.
  n_ivec_max: Maximum number of allowed atoms per (molecular) ion (fragment). Needs to match maximum_number_of_atoms_per_molecular_ion.
  n_ranges: Number of mass-to-charge-state-ratio range intervals mapped on this ion type.
  n_x: Number of bins in the x direction.
  n_y: Number of bins in the y direction.
  n_z: Number of bins in the z direction.
  n_bins: Number of bins.
(NXapm):
  (NXentry):
    # the NeXus default for application definitions wrt to the exists keyword is that it is required
    # so writing exists required can be omitted unless exists should be set to e.g. optional, recommended, or the [min, .., max, ..] syntax
    \@version:
      doc: |
        An at least as strong as SHA256 hashvalue of the file
        that specifies the application definition.
    # enumeration: [sha_256_hash]
    definition:
      doc: NeXus NXDL schema to which this file conforms.
      enumeration: [NXapm]
    experiment_identifier:
      doc: |
        Ideally, a (globally) unique persistent identifier 
        for referring to this experiment.
        
        The identifier is usually defined/issued by the facility, laboratory,
        or the principle investigator. The identifier enables to link 
        experiments to e.g. proposals.
    experiment_description:
      exists: optional
      doc: |
        Free-text description about the experiment.
        
        Users are strongly advised to detail the sample history in the respective 
        field and fill rather as completely as possible the fields of this 
        application definition rather than write details about the experiment
        into this free-text description field.
    start_time(NX_DATE_TIME):
      doc: |
        ISO 8601 time code with local time zone offset to UTC information included when the microscope session started.
        If the application demands that time codes in this section of the application definition should only be
        used for specifying when the experiment was performed - and the exact duration is not relevant - this
        start time field should be used.
        
        Often though it is useful to specify a time interval with specifying both start_time and end_time to allow
        for more detailed bookkeeping and interpretation of the experiment. The user should be aware that even with
        having both time instances specified, it may not be possible to infer how long the experiment took or for
        how long data were acquired.
        
        More detailed timing data over the course of the experiment have to be collected to compute this.
        These computations can take advantage of individual time stamps in NXevent_em instances to
        provide additional pieces of information.
    end_time(NX_DATE_TIME):
      exists: recommended
      doc: |
        ISO 8601 time code with local time zone offset to UTC included when the microscope session ended.
    # NEW ISSUE: fields like duration need a clearer description as to how these quantities should be defined. Most atom probers do not care for this other than getting an approximate hour-accurate estimate of the time how long it took to evaporate the specimen.
    program:
      doc: |
       Commercial or otherwise given name to the program which was used to create the file.
       
       Atom probe microscopy experiments are nowadays still in most cases
       controlled via commercial software. These are often designed as 
       integrated acquisition and instrument control software solutions.
       For AMETEK/Cameca local electrode atom probe (LEAP) instruments the least processed
       (rawest) numerical results and metadata are stored in so-called RHIT and HITS files,
       which are proprietary and whose specifications are not publicly documented.
       
       Supplementary metadata are kept in a database which is connected to the instrument
       control software. RHIT and HITS are proprietary binary file formats whose content 
       must not be accessed with software other than of AMETEK (IVAS/AP Suite). In effect, 
       RHIT and HITS store the experiment in a closed manner that is practically useless
       for users unless they have access to the commercial software.
       
       To arrive at a state that atom probe microscopy with LEAP instruments delivers
       a dataset with which users can study reconstructed atomic position and do e.g.
       composition analyses or other post-processing analysis tasks, these raw data
       have to be processed. Therefore, it is necessary that for an application definition
       to be useful, details about the physical acquisition of the raw data and all its
       processing steps have to be stored.
       
       With this a user can create derived quantities like ion hit positions (on the detector),
       calibrated time-of-flight data. These derived quantities are also needed to obtain
       calibrated mass-to-charge-state ratios, and finally the tomographic reconstruction of the
       ion positions.
       
       In most cases, an APM dataset is useful only if it gets post-processed via so-called
       ranging. Ranging defines rules for mapping time-of-flight and mass-to-charge-state ratio
       values on ion species. In turn, these labels decode elemental identities and can 
       often also be used to resolve isotopes. All these steps are in most cases performed
       using commercial software. Frequently, though, ranging and post-processing is also 
       performed with (open-source) research software. Therefore, there is strictly speaking
       not a single program used throughout an atom probe analysis not even for the early
       data acquisition and processing stages to obtain a useful reconstructed and ranged dataset.
       
       Therefore, the application definition documents not only the measurement but also the
       key post-processing steps which transform the proprietary data into a tomographic
       reconstruction with ranging definitions.
      \@version:
        doc: |
          Program version plus build number, commit hash, or description of an ever persistent resource
          where the source code of the program and build instructions can be found so that the program
          can be configured in such a manner that the result file is ideally recreatable yielding the
          same results.
    run_number(NX_CHAR):
      doc: |
        Not the specimen name or the experiment identifier but the identifier through which
        the experiment is referred to in the control software. For LEAP instruments it is
        recommended to use the IVAS/AP Suite run number. For other instruments, such as the 
        one from Stuttgart or Oxcart from Erlangen, or the instruments in Rouen, use the 
        identifier which is closest in meaning to the LEAP run number.
        
        As a destructive microscopy method, a run can be performed only once. It is possible, 
        however, to interrupt a run and restart data acquisition while still using the same 
        specimen. In this case, each evaporation run needs to be distinguished with 
        different run numbers. We follow this habit of most atom probe groups.
    experiment_documentation(NXnote):
      exists: optional
      doc: |
        Binary container for a file or a compressed collection of files which 
        can be used to add further descriptions and details to the experiment.
        The container can hold a compressed archive.
    thumbnail(NXnote):
      exists: recommended
      doc: |
        A small image that is representative of the entry; this can be an
        image taken from the dataset like a thumbnail of a spectrum.
        A 640 x 480 pixel jpeg image is recommended. 
        Adding a scale bar to that image is recommended but not required
        as the main purpose of the thumbnail is to provide e.g. thumbnail
        images for displaying them in data repositories.
      \@type:
    operation_mode(NX_CHAR):
      doc: | 
        What type of atom probe microscope experiment is performed.
        This field can be used e.g. by materials database systems to 
        qualitatively filter experiments.
      enumeration: [apt, fim, apt_and_fim]
    operator(NXuser):
      exists: [min, 1, max, infty]
      doc: |
        Contact information and eventually details of at least one person
        involved in the taking of the microscope session. This can be the
        principle investigator who performed this experiment.
        Adding multiple users if relevant is recommended.
      name:
        doc: Given (first) name and surname of the user.
      affiliation:
        exists: recommended
        doc: Name of the affiliation of the user at the point in time when the experiment was performed.
      address:
        exists: recommended
        doc: Postal address of the affiliation.
      email:
        doc: Email address of the user at the point in time when the experiment was performed. Writing the most permanently used email is recommended.
      orcid:
        exists: recommended
        doc: Globally unique identifier of the user as offered by services like ORCID or ResearcherID.
      telephone_number:
        exists: optional
        doc: (Business) (tele)phone number of the user at the point in time when the experiment was performed.
      role:
        exists: optional
        doc: |
          Which role does the user have in the place and at the point 
          in time when the experiment was performed? Technician operating
          the microscope. Student, postdoc, principle investigator, guest
          are common examples.
      social_media_name:
        exists: optional
        doc: Account name that is associated with the user in social media platforms.
      social_media_platform:
        exists: optional
        doc: Name of the social media platform where the account under social_media_name is registered.
    specimen(NXsample):
      # NEW ISSUE: inject the conclusion from the discussion with Andrea
      # according to SAMPLE.yaml 0f8df14 2022/06/15
      name:
        doc: |
          Descriptive name or ideally (globally) unique persistent identifier.
          The name distinguishes the specimen from all others and especially the
          predecessor/origin from where the specimen was cut.
          In cases where the specimen was e.g. site-specifically cut from samples or in cases of an instrument session during which multiple specimens are loaded, the name has to be descriptive enough to resolve which specimen on e.g. the microtip array was taken. The user is advised to store the details how specimens were cut/prepared from samples in the sample history.
                    
          This field must not be used for an alias of the specimen.
          Instead, use short_title.
          
          In cases where multiple specimens have been loaded into the microscope
          the name has to be the specific one, whose results are stored
          by this NXentry, because a single NXentry should be used only for
          the characterization of a single specimen.
          
          Details about the specimen preparation should be stored in the 
          sample history.
      sample_history:
        doc: Ideally, a reference to the location of or a (globally persistent) unique identifier of e.g. another file which should document ideally as many details as possible of the material, its microstructure, and its thermo-chemo-mechanical processing/preparation history. In the case that such a detailed history of the sample/specimen is not available, use this field as a free-text description to specify a sub-set of the entire sample history, i.e. what you would consider being the key steps and relevant information about the specimen, its material, microstructure, thermo-chemo-mechanical processing state and details of the preparation.
      preparation_date(NX_DATE_TIME):
        doc: | 
          ISO 8601 time code with local time zone offset to UTC information when the specimen was prepared.
          
          Ideally report the end of the preparation, i.e. the last known time the measured specimen surface
          was actively prepared. Usually this should be a part of the sample history, i.e. the sample
          is imagined handed over for the analysis. At the point it enters the microscope the session starts.
          
          Knowing when the specimen was exposed to e.g. specific atmosphere is especially required for
          environmentally sensitive material such as hydrogen charged specimens or experiments
          including tracers with a short half time. Further time stamps prior to preparation_date should
          better be placed in resources which describe the sample_history.
      short_title:
        exists: optional
        doc: Possibility to give an abbreviation of the specimen name field.
      atom_types:
        doc: |
          Use Hill's system for listing elements of the periodic table which are inside or attached
          to the surface of the specimen and thus relevant from a scientific point of view.
          
          The purpose of the field is to offer materials database systems an opportunity to parse
          the relevant elements without having to interpret these from the sample history.
      description:
        exists: optional
        doc: Discouraged free-text field in case properly designed records for the sample_history are not available.
      # NEW ISSUE: error model
      # NEW ISSUE: use Andrea and MarkusK groups for describing the geometry of the sample
    (NXdata):
      # exists: optional
      doc: |
        Hard link to a location in the hierarchy of the NeXus file
        where the data for default plotting are stored.
    (NXcoordinate_system_set):
      doc: |
        Container to hold different coordinate systems conventions.
        
        By default NeXus uses the McStas coordinate system, whose axis convention 
        is so that the z axis is along the neutron propagation axis, 
        the y axis is vertical up, and the x axis points left when looking along
        the z-axis, completing a right-handed coordinate system.
        Assuming the McStas coordinate system as the reference (indicated by "."),
        a specific experiment or simulation may defined further coordinate systems.
        
        It is the purpose of this base class to define these conventions and
        offer a place to store mappings between coordinate systems.
        
        For each coordinate system one should use a set of NXtransformations to define:
        * The axis conventions
        * The affine transformations which bring each axis of this coordinate system
          into registration with the McStas coordinate system.
        * Equally affine transformations from the inverse mapping should be specified.
        
        As an example one may take an experiment or computer simulation where
        there is a laboratory (lab) coordinate system, a sample/specimen coordinate
        system, a crystal coordinate system, and additional coordinate systems,
        which are eventually attached to components of the instrument.
        
        If no additional transformation is specified in this group or if an
        instance of an NXcoordinate_system_set is absent it should be assumed the
        McStas coordinate system is used.
        
        With atom probe microscopy, several coordinate systems should be distinguished:
        * The usual NeXus (McStas coordinate system). 
        * The laboratory space
        * The specimen space
        * The detector space
        * The reconstruction space
        * Eventually further coordinate systems attached to the flight path
          of the ions might be defined.
        
        Coordinate systems should be right-handed one.
        Clockwise rotations should be considered positive rotations.
        
        In atom probe microscopy a frequently used choice for the detector space
        (coordinate system) is discussed with the so-called detector space image
        (stack). This is a stack of two-dimensional histograms of detected ions
        within a predefined evaporation ID interval. Typically, the set of
        ion evaporation sequence IDs is grouped into chunks.
        
        For each chunk a histogram of the ion hit positions
        on the detector is computed. This leaves the possibility
        for inconsistency between the so-called detector
        coordinate system and a specimen-affixed coordinate system.
        
        The transformation here resolves this ambiguity by
        specifying how the positive z-axes of either
        coordinate systems can be oriented.
        Consult the work of A. J. Breen and B. Gault and teams
        for further details.
    # NEW ISSUE: add Breen's Ultramicroscopy paper on atom probe crystallography
    # in what follows each component of the instrument might be equipped with an NXmonitor
    (NXmonitor):
      exists: [min, 0, max, infty]
    # NEW ISSUE ADD AS MANY MONITORS AS NEEDED, also for pressure etc.
    atom_probe(NXinstrument):
      doc: |
        Metadata and numerical data of the atom probe and the lab in which it stands.
        
        An atom probe microscope (experiment) is different compared to a large-scale facility
        or electron accelerator experiments in at least two ways:
        * First, ionized atoms and molecular ion(s fragments) (in the case of atom probe tomography)
          and (primarily) imaging gas ions (in the case of field ion microscopy)
          are accelerated towards a position-sensitive and time-of-flight taking detector system.
          Hence, there is no real probe/beam.
        * Second, the specimen is the lens of an atom probe microscope.
      instrument_name:
        doc: |
          Given name of the atom probe at the hosting institution. This is an alias.
          Examples could be LEAP5000, Raptor, Oxcart, one atom at a time, etc.
      location:
        exists: optional
        doc: |
          Location of the lab or place where the instrument is installed.
          Using GEOREF is preferred.
      (NXmanufacturer):
      flight_path_length(NX_FLOAT):
        doc: The space inside the atom probe that ions pass through nominally when they leave the specimen and travel to the detector.
        unit: NX_LENGTH
      # NEW ISSUE: discussion depends on the type of instrument, straight flight path, curved
      field_of_view(NX_FLOAT):
        exists: optional
        unit: NX_LENGTH
      analysis_chamber(NXchamber):
        exists: optional
      # NEW ISSUE: add and support I/O of further details
      load_lock_chamber(NXchamber):
        exists: optional
      # NEW ISSUE: add and support I/O of further details
      buffer_chamber(NXchamber):
        exists: optional
      # NEW ISSUE: add and support I/O of further details
      getter_pump(NXpump):
        exists: optional
      # NEW ISSUE: add and support I/O of further details
      roughening_pump(NXpump):
        exists: optional
      # NEW ISSUE: add and support I/O of further details
      turbomolecular_pump(NXpump):
        exists: optional
      # NEW ISSUE: add and support I/O of further details
      (NXreflectron):
        exists: optional
        # check if doc string gets carried over doc: Device for reducing flight time differences of ions in ToF experiments.
        applied(NX_BOOLEAN):
          doc: Was the reflectron used?
      # NEW ISSUE: flat_test_data(NXcollection):
      #   exists: recommended
      #   doc: NEED FOR FURTHER DISCUSSIONS WITH APM COLLEAGUES WHAT IS RELEVANT HERE.
      local_electrode(NXlens):
        doc: |
          A local electrode guiding the ion flight path.
        (NXaperture):
          exists: optional
      # but the local_electrode does not really on purpose create a magnetic field,
      # specific for an electro-magnetic lens is the symmetry of its field
      # NEW ISSUE: for now keep that we have what is an NXlens
      # NEW ISSUE: APEX MONITOR / LEAP distance monitoring
      # NEW ISSUE: the definition of flat test data should be included and documented
      # NEW ISSUE: local electrode, baking strategies, storage
      ion_detector(NXdetector):
        doc: |
          Detector for taking raw time-of-flight nd ion/hit impact positions data.
        type:
          doc: |
            Description of the detector type. Specify if the detector is
            not the usual type of delay-line detectors.
          enumeration: [mcp_dld, phosphor_ccd]
        name:
          exists: recommended
          doc: Given name.
        # NEW ISSUE: why not (NXmanufacturer)
        model:
          exists: recommended
          doc: Given brand or model name by the manufacturer.
        serial_number:
          exists: recommended
          doc: Given hardware name/serial number or hash identifier issued by the manufacturer.
        manufacturer_name:
          exists: recommended
          doc: Given name of the manufacturer.
        signal_amplitude(NX_FLOAT):
          exists: optional
          doc: |
            Amplitude of the signal detected on the multi-channel plate (MCP).
            
            This field should be used for storing the signal amplitude quantity
            within ATO files. The ATO file format is used primarily by the
            atom probe groups of the GPM in Rouen, France.
          unit: NX_CURRENT
          dimensions:
            rank: 1
            dim: [[1, n_ions]]
      pulser(NXpulser_apm):
        pulse_mode:
        pulse_frequency(NX_NUMBER):
        pulse_fraction(NX_NUMBER):
        pulsed_voltage(NX_FLOAT):
      ##MK will the symbols be carried through?
      (NXstage_lab):
        # NEW ISSUE: consider more detailed opportunities for specifying holders like cryo-controller holder, type of holder, material for pucks make a difference for studies which hunt for hydrogen signal, equally dwell time in buffer and load lock chamber and environmental transfer, the application definition does not account for this at the moment, would need a class representing stage and specimen holder hierarchy of the entire sample loading and transfer system and the contributions or not these components make wrt to contamination.
        base_temperature(NX_FLOAT):
          doc: Average temperature at the specimen base, i.e. base temperature, during the measurement.
          unit: NX_TEMPERATURE
      control_software(NXcollection):
        exists: optional
        doc: |
          The majority of atom probe microscopes com from a 
          single commercial manufacturer AMETEK (formerly Cameca).
          Their instruments are controlled via an(/a set) of integrated
          instrument control system(s) (APSuite/IVAS/DAVis).
          
          By contrast, instruments which were built by individual
          research groups such as of the French (GPM, Rouen, France),
          the Schmitz (Inspico, Stuttgart, Germany),
          the Felfer (Oxcart, Erlangen, Germany),
          the Northwestern (D. Isheim, Seidman group et al.),
          or the PNNL group (Pacific Northwest National Laborary,
          Portland, Oregon, U.S.) have other solutions
          to control the instrument.
          
          Some of which are modularized and open,
          some of which realize also integrated control units with
          portions of eventually undisclosed source code and
          (so far) lacking (support of)/open APIs.
          
          Currently, there is no accepted/implemented
          community-specific API for getting finely granularized
          access to such control settings. 
          
          These considerations motivated design of NXapm in that
          it stores quantities to begin with via an NXcollection.
          Holding heterogeneous, not yet standardized but relevant 
          pieces of information is the purpose of this collection.
        # NEW ISSUE: With new development pull fields out of this collection into dedicated groups.
        # might consider moving this to individual groups under (NXpump) or (NXchamber) groups.
        analysis_chamber(NXcollection):
          exists: optional
          doc: Track time-dependent settings over the course of the measurement about the environment in the analysis chamber such as gas pressure values etc.
          pressure(NX_FLOAT):
            doc: Average pressure in the analysis chamber.
            unit: NX_PRESSURE
        # NEW ISSUE: pressure in the buffer and load lock chambers
      specimen_monitoring(NXcollection):
        exists: optional
        # NEW ISSUE: should be promoted to recommended at some point in particular with closer integration of APM and EM instruments
        doc: | 
          A place where details about the initial shape
          of the specimen can be stored. Ideally, here 
          also data about the shape evolution of the specimen
          can be stored. There are currently very few techniques which
          can measure the shape evolution:
          * Correlative electron microscopy 
            but this usually evolves an interrupted experiment
            in which the specimen is transferred, an image taken,
            and a new evaporation sequence initiated.
          * Another, less accurate method, though, is to monitor
            the specimen evolution via the in-built camera system
            (if available) in the instrument.
          * Another method is to use correlated scanning force microscopy
            methods (pioneered by the imec group, Belgium).
          * A continuous monitoring of the specimen in a 
            correlative electron microscopy/atom probe experiment
            is planned to be developed by T. Kelly, 
            R. Dunin-Borkowski, and B. Gault et al.
        # NEW ISSUE: consider the above comments into new fields when important progress has been made.
        initial_radius(NX_FLOAT):
          doc: Ideally measured or best elaborated guess of the initial radius of the specimen.
          unit: NX_LENGTH
        shank_angle(NX_FLOAT):
          doc: Ideally measured or best elaborated guess of the shank angle. This is a measure of the specimen taper. Define it in such a way that the base of the specimen is modelled as a conical frustrum so that the shank angle is the (shortest) angle between the specimen space z-axis and a vector on the lateral surface of the cone.
          unit: NX_ANGLE
        # NEW ISSUE: define e.g. radius(NX_FLOAT) and evaporation_id(NX_UINT) to store snapshots of the shape evolution of the specimen.

      ion_impact_positions(NXprocess):
        exists: recommended
        doc: | 
          Details about where ions hit the ion_detector and data processing
          steps related to analog-to-digital conversion of detector signals
          into ion hit positions. For AMETEK LEAP instruments this processing
          takes place partly in the control unit of the detector partly
          in the software. The process is controlled by the acquisition/instrument
          control software (IVAS/APSuite/DAVis). The exact details are not
          documented by AMETEK in an open manner.
          For instruments built by individual research groups, 
          like the Oxcart instrument, individual timing data from the
          delay-line detector are openly accessible.
        program:
          doc: |
            Given name of the program that was used to perform this computation.
            Apart from the classical approach to use AMETEK software for this
            processing step, a number of open-source alternative tools exists.
          \@version:
            doc: |
              Program version plus build number, commit hash, or description of an
              ever persistent resource where the source code of the program and build
              instructions can be found so that the program can be configured in
              such a manner that the result file is ideally recreatable yielding
              the same results.
        arrival_time_pairs(NX_NUMBER):
          exists: recommended
          doc: |
            Raw readings from the analog-to-digital-converter
            timing circuits of the detector wires.
          # NEW ISSUE: discuss with Oxcart developers which modifications might be necessary here.
          unit: NX_TIME
          dimensions:
            rank: 3
            dim: [[1, n_ions], [2, n_dld_wires], [3, 2]]
        hit_positions(NX_NUMBER):
          doc: |
            Evaluated ion impact coordinates at the detector
            (either as computed from the arrival time data
            or as reported by the control software).
          unit: NX_LENGTH
          dimensions:
            rank: 2
            dim: [[1, n_ions], [2, 2]]
        detection_rate(NX_FLOAT):
          doc: Average detection rate over the course of the experiment.
          unit: NX_DIMENSIONLESS
          # NEW ISSUE: follow the example of base_temperature_time_profile to monitor the temporal evolution of the detection_rate over the course of the evaporation sequence
          # detection_rate_time_profile(NX_FLOAT):
          #   doc: Spatio-temporal profile of the detection rate since the start of the measurement.
          # NEW ISSUE: discuss how to handle cases when we would like to store ideally an array where one dimensions is NX_TIME and the other one is e.g. NX_PERCENT 
      hit_multiplicity(NXprocess):
        # NEW ISSUE: use symbols to monitor number of pulses
        exists: recommended
        doc: |
          Data post-processing step which is, like the impact position analyses, 
          also usually executed in the integrated control software. 
          This processing yields how many ions were detected with each pulse.
          
          It is possible that multiple ions evaporate and hit the same or 
          different pixels of the detector on the same pulse. 
          These data form the basis to analyses of the so-called
          (hit) multiplicity of an ion. 
          Multiplicity must not be confused with how many 
          atoms of the same element or isotope, respectively,
          a molecular ion contains (which is encoded with the
          isotope_vector field of each NXion instance.
        program:
          doc: |
            Given name of the program that was used to perform this computation.
            Apart from the classical approach to use AMETEK software for this
            processing step, a number of open-source alternative tools exists.
          \@version:
            doc: |
              Program version plus build number, commit hash, or description of an
              ever persistent resource where the source code of the program and build
              instructions can be found so that the program can be configured in
              such a manner that the result file is ideally recreatable yielding
              the same results.
        pulses_since_last_ion(NX_UINT):
          exists: recommended
          doc: |
            Number of pulses since the last detected ion pulse.
            For multi-hit records, after the first record, this is zero.
          dimensions:
            rank: 1
            dim: [[1, n_ions]]
          unit: NX_UNITLESS
        hit_multiplicity(NX_UINT):
          exists: recommended
          # NEW ISSUE: further discussions with members of the APM community is required to clarify this field and what it means
          doc: Hit multiplicity.
          dimensions:
            rank: 1
            dim: [[1, n_ions]]
          unit: NX_UNITLESS
        pulse_id(NX_UINT):
          # NEW ISSUE: I feel the name is misleading, the quantity is 
          # named like this de facto only because thats the jargon term with epos files.
          exists: optional
          doc: Number of pulses since the start of the atom probe run/evaporation sequence.
          dimensions:
            rank: 1
            dim: [[1, n_ions]]
          unit: NX_UNITLESS
      ion_filtering(NXprocess):
        exists: recommended
        doc: |
          Like impact position and hit multiplicity computations, 
          ion filtering is a data post-processing step with which users
          identify which of the detected ions should be included
          in the voltage-and-bowl correction.
          This post-processing is usually performed via GUI interaction
          in the reconstruction pipeline of IVAS/APSuite.
        program:
          doc: |
            Given name of the program that was used to perform this computation.
            Apart from the classical approach to use AMETEK software for this
            processing step, a number of open-source alternative tools exists.
          \@version:
            doc: |
              Program version plus build number, commit hash, or description of an
              ever persistent resource where the source code of the program and build
              instructions can be found so that the program can be configured in
              such a manner that the result file is ideally recreatable yielding
              the same results.
        evaporation_id_included(NX_BOOLEAN):
          doc: Bitmask which is set to true if the ion is considered and false otherwise.
          dimensions:
            rank: 1
            dim: [[1, n_ions]]
      voltage_and_bowl_correction(NXprocess):
        exists: recommended
        doc: |
          Data post-processing step to correct for ion impact 
          position flight path differences, detector biases, 
          and nonlinearities. This step is usually performed
          with commercial software.
        program:
          doc: |
            Given name of the program that was used to perform this computation.
            Apart from the classical approach to use AMETEK software for this
            processing step, a number of open-source alternative tools exists.
          \@version:
            doc: |
              Program version plus build number, commit hash, or description of an
              ever persistent resource where the source code of the program and build
              instructions can be found so that the program can be configured in
              such a manner that the result file is ideally recreatable yielding
              the same results.
        # NEW ISSUE: realistic is that currently scientists can pull always a calibrated time-of-flight but not necessarily unprocessed timing data from the detector (unless individuals built the instrument). Relevant for ranging are the calibrated data, thats why only these (as an intermediate/compromise solution) are required in this version of the application definition
        raw_tof(NX_FLOAT):
          exists: recommended
          doc: Raw time-of-flight data as read out from the acquisition software if these data are available and accessible.
          unit: NX_TIME
          dimensions:
            rank: 1
            dim: [[1, n_ions]]
        calibrated_tof(NX_FLOAT):
          # NEW ISSUE: which type of calibrations are applied is usually a modified sqrt tof to m/q mapping the exact parameter of which are for LEAP instruments not immediately accessible.
          doc: Calibrated time-of-flight.
          unit: NX_TIME
          dimensions:
            rank: 1
            dim: [[1, n_ions]]
        tof_calibration(NXcollection):
          exists: recommended
          doc: |
            The key idea and algorithm of the voltage-and-bowl correction 
            is qualitatively similar for instruments of different manufacturers
            or research groups.
            
            Specific differences exists though in the form of different
            calibration models. For now we do not wish to resolve or 
            generalize these differences. Rather the purpose of this collection
            is to provide a container where model-specific parameters
            and calibration models can be stored if users know these
            for sure.
            
            For AMETEK LEAP atom probes this should be the place for
            storing initial calibration values. These values are
            accessible normally only by AMETEK service engineers
            and used by them for calibrating the detector and instrument.
            
            Users can also use this NXcollection for storing the
            iteratively identified calibrations which scientists
            will get displayed in e.g. AP Suite while they execute
            the voltage-and-bowl correction as a part of the
            reconstruction pipeline in APSuite.
          # NEW ISSUE: should be recommended as otherwise one cannot ensure that numerically the same voltage-and-bowl correction results are obtained (without knowning the parameters...)
      mass_to_charge_conversion(NXprocess):
        exists: recommended
        doc: |
          Data post-processing step in which calibrated time-of-flight data
          (ToF) are interpreted into mass-to-charge-state ratios.
        program:
          doc: |
            Given name of the program that was used to perform this computation.
            Apart from the classical approach to use AMETEK software for this
            processing step, a number of open-source alternative tools exists.
          \@version:
            doc: |
              Program version plus build number, commit hash, or description of an
              ever persistent resource where the source code of the program and build
              instructions can be found so that the program can be configured in
              such a manner that the result file is ideally recreatable yielding
              the same results.
        parameter(NXcollection):
          exists: recommended
          doc: |
            Store vendor-specific calibration models here (if these are available).
        mass_to_charge(NX_FLOAT):
          doc: Mass-to-charge-state ratios
          unit: NX_ANY
          # \@units: Da
          dimensions:
            rank: 1
            dim: [[1, n_ions]]
      reconstruction(NXprocess):
        exists: recommended
        doc: |
          Data post-processing step to create a tomographic reconstruction
          of the specimen based on selected calibrated ion hit positions,
          the evaporation sequence, and voltage curve data.
          Very often scientists use own software scripts according
          and published procedures, so-called reconstruction protocols,
          i.e. numerical recipes how to compute x, y, z atomic positions
          from the input data.
        program:
          doc: |
            Given name of the program that was used to perform this computation.
            Similar comments as voltage_and_bowl_correction apply.
          \@version:
            doc: |
              Ideally program version plus build number, or commit hash or description of ever persistent resources where the source code of the program and build instructions can be found so that the program can be configured ideally in such a manner that the result of this computational process is recreatable in the same deterministic manner.
        protocol_name:
          exists: recommended
          doc: |
            Qualitative statement about which reconstruction protocol was used.
          enumeration: [bas_original, bas_modified, geiser, gault, ivas, apsuite, other]
        reconstructed_positions(NX_FLOAT):
          doc: |
            Three-dimensional reconstructed positions of the ions.
            Interleaved array of x, y, z positions in the specimen space.
          unit: NX_LENGTH
          dimensions:
            rank: 2
            dim: [[1, n_ions], [2, 3]]
        reconstruction_parameter(NXcollection):
          exists: recommended
          # NEW ISSUE: the status here should be promoted to required but currently one needs to manually extract the reconstruction parameters
          # NEW ISSUE: for instance from commercial software, here a better strategy is needed how to document the reconstruction parameter.
          doc: |
            Different reconstruction protocols exist. Although these approaches
            are qualitatively similar, each protocol uses different parameters
            (and interprets these differently). The source code to IVAS/APSuite
            is not open. For now users should store reconstruction parameter
            in a collection.
          # k(NX_FLOAT):
          #   doc: Field factor
          #   unit: ??
          # icf(NX_FLOAT):
          #   doc: Image compression factor.
          #   unit: ??
          # NEW ISSUE: for AMETEK, as well as for the Bas, Geiser, and 
          # Gault protocols we know the usual naming of the parameters
          # they should be added as optional quantities.
          # Therefore, it is difficult for now to generalize the meaning
          # and idea behind all relevant reconstruction parameters.
          # One could create a class for each reconstruction method, as 
          # these methods are de facto application definitions.
        naive_point_cloud_density_map(NXprocess):
          doc: |
            To get a first overview of the reconstructed dataset,
            the format conversion computes a simple 3d histogram
            of the ion density using one nanometer cubic bins without
            applying smoothening algorithms on this histogram.
          program:
            doc: |
              Given name of the program that was used to perform this computation.
              Apart from the classical approach to use AMETEK software for this
              processing step, a number of open-source alternative tools exists.
            \@version:
              doc: |
                Program version plus build number, commit hash, or description of an
                ever persistent resource where the source code of the program and build
                instructions can be found so that the program can be configured in
                such a manner that the result file is ideally recreatable yielding
                the same results.
          (NXdata):
            doc: A default three-dimensional histogram of the total number of ions in each bin.
            # \@signal:
            #   doc: Which is the dependent signal to plot, here the counts.
            # \@axes:
            #   doc: Which axes are plotted, here the three principal coordinate directions.
            # counts(NX_NUMBER):
            #   doc: Array of counts for each bin.
            #   unit: NX_UNITLESS
            #   dimensions:
            #     rank: 3
            #     dim: [[0, n_x], [1, n_y], [2, n_z]]  #why do indices start at 0 here and not 1 ?
            # xpos(NX_NUMBER):
            #   doc: Bin positions along the x axis.
            #   unit: NX_LENGTH
            # \@xpos_indices:
            #   doc: Bin edge end along x.
            # ypos(NX_NUMBER):
            #   doc: Bin positions along the y axis.
            #   unit: NX_LENGTH
            # \@ypos_indices:
            #   doc: Bin edge end along y.
            # zpos(NX_NUMBER):
            #   doc: Bin positions along the z axis.
            #   unit: NX_LENGTH
            # \@zpos_indices:
            #   doc: Bin edge end along z.
            # \@long_name:
            #   doc: Title of the diagram.
      ranging(NXprocess):
        exists: recommended
        doc: |
         Data post-processing step in which elemental, isotopic,
         and/or molecular identities are assigned to the ions.
         The documentation of these steps is based on ideas
         described in the literature:
         * [M. K. Miller](https://doi.org/10.1002/sia.1719)
         * [D. Haley et al.](https://doi.org/10.1017/S1431927620024290)
         * [M. Kühbach et al.](https://doi.org/10.1017/S1431927621012241)
        program:
          doc: |
            Given name of the program that was used to perform this computation.
            Apart from the classical approach to use AMETEK software for this
            processing step, a number of open-source alternative tools exists.
          \@version:
            doc: |
              Program version plus build number, commit hash, or description of an ever persistent resource
              where the source code of the program and build instructions can be found so that the program
              can be configured in such a manner that the result file is ideally recreatable yielding the
              same results.
        number_of_iontypes(NX_UINT):
          doc: How many ion types are distinguished.
          unit: NX_UNITLESS
        maximum_number_of_atoms_per_molecular_ion(NX_UINT):
          doc: |
            Assumed maximum value that suffices to store all relevant
            molecular ions, even the most complicated ones. 
            Currently a value of 32 is used.
          unit: NX_UNITLESS
        mass_to_charge_distribution(NXprocess):
          exists: recommended
          doc: |
            Specifies the computation of the mass-to-charge histogram.
            Usually mass-to-charge values are studied as an ensemble quantity,
            specifically these values are binned.
            The (NXprocess) stores the settings of this binning.
          program:
            doc: |
              Given name of the program that was used to perform this computation.
              Apart from the classical approach to use AMETEK software for this
              processing step, a number of open-source alternative tools exists.
            \@version:
              doc: |
                Program version plus build number, commit hash, or description of an ever persistent resource
                where the source code of the program and build instructions can be found so that the program
                can be configured in such a manner that the result file is ideally recreatable yielding the
                same results.
          range_minmax(NX_FLOAT):
            doc: Smallest and largest mass-to-charge value.
            unit: NX_ANY
            # \@units: Da
            # NEW ISSUE: NX_ATOMIC_MASS_UNIT use Tommasso scheme here Da
            dimensions:
              rank: 1
              dim: [[1, 2]]
          range_increment(NX_FLOAT):
            doc: Binning width
            unit: NX_ANY
            # \@units: Da
            # NEW ISSUE: unit must match with range, is Da
          mass_spectrum(NXdata):
            doc: |
              A default histogram aka mass spectrum of the mass-to-charge-state ratio values.
            # \@signal:
            #   doc: Which is the dependent signal to plot.
            # \@axes:
            #   doc: Which axes are plotted, here counts over bins.
            # counts(NX_NUMBER):
            #   doc: Array of counts for each bin.
            #   unit: NX_UNITLESS
            #   dimensions:
            #     rank: 1
            #     dim: [[1, n_bins]]
            # bin_ends(NX_NUMBER):
            #   doc: End of mass-to-charge-state ratio bin.
            #   unit: NX_ANY
            #   # \@units: Da
            # \@bin_ends_indices:
            #   doc: Label of the mass-to-charge-state ratio bin axis.
            # \@long_name:
            #   doc: Title of the diagram.
        background_quantification(NXprocess):
          exists: recommended
          doc: |
            Details of the background model which was used to
            correct the total counts per bin into counts.
          program:
            doc: |
              Given name of the program that was used to perform this computation.
              Apart from the classical approach to use AMETEK software for this
              processing step, a number of open-source alternative tools exists.
            \@version:
              doc: |
                Program version plus build number, commit hash, or description of an ever persistent resource
                where the source code of the program and build instructions can be found so that the program
                can be configured in such a manner that the result file is ideally recreatable yielding the
                same results.
        # NEW ISSUE: add parameters of the background model in an e.g.
        # NXcollection as these are specific to every background model
        # NEW ISSUE: touching upon i.e. research activities by Andrew London et al.
        # substantiating the need for a clearer description how peak/signals were
        # eventually processed via deconvolution methods
        peak_search_and_deconvolution(NXprocess):
          exists: recommended
          doc: |
            How where peaks in the background-corrected 
            mass-to-charge histogram identified?
          program:
            doc: |
             Given name of the program that was used to perform this computation.
             Apart from the classical approach to use AMETEK software for this
             processing step, a number of open-source alternative tools exists.
            \@version:
              doc: |
                Program version plus build number, commit hash, or description of an ever persistent resource
                where the source code of the program and build instructions can be found so that the program
                can be configured in such a manner that the result file is ideally recreatable yielding the
                same results.
          (NXpeak):
        peak_identification(NXprocess):
          exists: recommended
          doc: |
            Details about how peaks, with taking into account
            error models, were interpreted as an iontype or not.
          program:
            doc: |
             Given name of the program that was used to perform this computation.
             Apart from the classical approach to use AMETEK software for this
             processing step, a number of open-source alternative tools exists.
            \@version:
              doc: |
                Program version plus build number, commit hash, or description of an ever persistent resource
                where the source code of the program and build instructions can be found so that the program
                can be configured in such a manner that the result file is ideally recreatable yielding the
                same results.
          (NXion):
            isotope_vector(NX_UINT):
            charge_state(NX_UINT):
            mass_to_charge_range(NX_FLOAT):
